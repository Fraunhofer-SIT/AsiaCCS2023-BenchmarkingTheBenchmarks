package de.fraunhofer.sit.specifications.attackinputs;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.data.Data;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class FileRead extends Input {
	String filename;
	Data input;
	
	public class Template {
		public static void attackStep(String filepath, byte[] contents) throws IOException {
	
			if (new File(filepath).exists()) {
				new File(filepath).delete();
			}
			Files.write(Paths.get(filepath), contents, StandardOpenOption.CREATE);
			System.out.println("[FILEREAD] writing to " + filepath + " : "  + new String(contents));
		}
	}
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public String getTagName() {
		return "FileRead";
	}

	@Override
	public void readIn(Node node) {
		filename = XMLUtils.getAttributeValue(node, "path");
		input = Data.parse(node.getFirstChild());
	}

	@Override
	public List<Object> getParameterValues() {
		// TODO Auto-generated method stub
		List<Object> l = new ArrayList<>();
		l.add(filename);
		l.add(input);
		return l;
	}
	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> fields = new HashMap<>();
		return fields;
	}
	@Override
	boolean isPreLaunch() {
		// TODO Auto-generated method stub
		return false;
	}

}
