package de.fraunhofer.sit.specifications.attackinputs;

import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.stream.Collectors;

import org.apache.commons.lang3.CharSet;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.util.IXMLReadable;

public class InputDataAssignment implements IXMLReadable {
	
	public List<InputParameter> inputParameters = new ArrayList<>();
	
	@Override
	public String getTagName() {
		return "InputData";
	}

	@Override
	public void readIn(Node node) {
		
		readChildsIntoCollection(node, inputParameters);
		
	}
	
	public String replaceVariablesInString(String string, boolean urlEncode) {
		for (InputParameter m : inputParameters) {
			if (m instanceof StringParameter) {
				String v = ((StringParameter) m).value;
				if (v == null)
					v = "";
				if (((StringParameter)m).urlencode || urlEncode) {
					//todo: is ascii ok??
					v = URLEncoder.encode(v, Charset.forName("ascii"));
				}
				string = string.replaceAll("\\*"+m.id+"\\*", Matcher.quoteReplacement(v));
			}
		}
		return string;
	}
	
	
	public InputParameter getParameter(String name) {
		for (InputParameter m : inputParameters) {
			if (name.equals(m.id)) {
				return m;
			}
		}
		return null;
	}
	
	public void addParameter(String key, String value) {
		inputParameters.add(new StringParameter(key, value));
	}
	
	@Override
	public String toString() {
		return String.join(", ", inputParameters.stream().map(Object::toString).collect(Collectors.toList()));
	}

	public void addAll(List<InputParameter> inputParameterAssignments) {
		inputParameters.addAll(inputParameterAssignments);
	}
	
	public void add(InputParameter a) {
		inputParameters.add(a);
	}

	public boolean shouldURLEncodeParameter(int a) {
		// TODO Auto-generated method stub
		 InputParameter parameter = inputParameters.get(a);
		 if (parameter instanceof StringParameter) {
			 return ((StringParameter) parameter).urlencode;
		 }
		 return false;
	}
	
	
}
