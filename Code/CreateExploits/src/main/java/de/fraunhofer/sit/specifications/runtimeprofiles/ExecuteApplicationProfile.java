package de.fraunhofer.sit.specifications.runtimeprofiles;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.testcases.TestCase;

public class ExecuteApplicationProfile extends RuntimeProfile {
	@Override
	public String getTagName() {
		return "ExecuteApplication";
	}

	@Override
	public void readIn(Node node) {
		
	}

	public static class Template {
		// if a testcase declares an input, that input should override one of these methods.
		public static List<String> getCmdArgs() { return new ArrayList<>(); } 
		public static Map<String,String> getEnvArgs() { return null; }
		public static void writeToOutputStream(OutputStream is) { return; };
		
		public static boolean checkOutput(String varName, String varValue) {
			return false;
		}
		private static String processStdOut;
		
		public static boolean attack(String input) throws IOException {
			try {
				ArrayList<String> cmd = new ArrayList<>();
				cmd.add("java");
				cmd.add("-jar");
				cmd.add("*AppUnderTest*");
				cmd.addAll(getCmdArgs());
				
				ProcessBuilder pb = new ProcessBuilder(cmd);
				Map<String,String> envArgs = getEnvArgs();
				if (envArgs != null) {
					for (Entry<String, String> kv : envArgs.entrySet()) {
						envArgs.put(kv.getKey(), kv.getValue());
					}
				}
				Process p = pb.start();
				writeToOutputStream(p.getOutputStream());
				processStdOut = "";
						
				p.waitFor();

				BufferedInputStream bis = new BufferedInputStream(p.getInputStream());
				processStdOut = new String(bis.readAllBytes());
				return checkOutput(null, null);
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
		}
		
	}

	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, new HashMap<String, String>());

	}

}
