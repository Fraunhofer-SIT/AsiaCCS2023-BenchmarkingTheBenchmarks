package de.fraunhofer.sit.specifications.exploitcheckers;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import org.apache.commons.lang3.StringEscapeUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.NodeTraversor;
import org.jsoup.select.NodeVisitor;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackpatterns.Presets;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.codegen.IGenerateCode;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class BinaryExecuted extends SuccessfulExploitIndicator implements IGenerateCode {

	public static class TemplateSubstring {
		
		public static boolean checkOutput() throws Exception {
			File f = new File("/canary.txt");
			boolean exists = f.exists();
			System.out.println("[BINARYEXECUTED] checking if /canary.txt was created ? " + exists);
			return exists;
		}

	
	}

	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(TemplateSubstring.class, getFieldRenames());
	}

	@Override
	public String getTagName() {

		return "BinaryExecuted";
	}

	@Override
	public void readIn(Node node) {
	}

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> fields = new HashMap<>();
		return fields;
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> params = new ArrayList<>();
		return params;
	}
	
	
}
