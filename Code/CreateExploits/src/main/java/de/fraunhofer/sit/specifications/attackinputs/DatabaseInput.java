package de.fraunhofer.sit.specifications.attackinputs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

/**
 * testcase reads from an sql database
 * @author naeumann
 *
 */
public class DatabaseInput extends Input {

	public String connection;
	public String sqlstatement;
	 class Template {

		static void attackStep(String connectionString, String sql) throws Exception {
			System.out.println("[DATABASEINPUT] connecting to database " + connectionString);
			Connection connection = DriverManager.getConnection(connectionString, null, null);
			// ";" can't be used inside a statement. "escape" with /semicolon/
			for (String s : sql.split(";")) {
				if (s.trim().isEmpty())
					continue;
				s = s.replace("/semicolon/", ";");
				System.out.println("[DATABASEINPUT] executing statement: " + s);
				
				Statement createStatement = connection.createStatement();
				try {
					int res = createStatement.executeUpdate(s);
					System.out.println("[DATABASEINPUT] update count: " + res);
				} catch (SQLException e) {
					new RuntimeException("[DATABASEINPUT] statement execution failed. continueing", e).printStackTrace();
				}
				
			}
			connection.close();
			Thread.sleep(1000);
		}
	}
	
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		// TODO Auto-generated method stub
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public String getTagName() {
		// TODO Auto-generated method stub
		return "DatabaseInput";
	}

	@Override
	public void readIn(Node node) {
		connection = XMLUtils.getAttributeValue(node, "connection");
		sqlstatement = node.getTextContent();
		
	}

	@Override
	public List<Object> getParameterValues() {
		// TODO Auto-generated method stub
		ArrayList<Object> params = new ArrayList<>();
		params.add(connection);
		params.add(sqlstatement);
		return params;
	}

	@Override
	boolean isPreLaunch() {
		// TODO Auto-generated method stub
		return false;
	}
	
}
