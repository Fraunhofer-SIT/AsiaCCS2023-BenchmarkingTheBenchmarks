package de.fraunhofer.sit.specifications.executionprofile.testsuite;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.FileUtils;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.executionprofile.servletadapters.OWASPServletAdapter;
import de.fraunhofer.sit.specifications.executionprofile.servletadapters.TestcaseServletAdapter;
import de.fraunhofer.sit.specifications.util.MavenDependencyUtils;
import spoon.reflect.code.CtBlock;
import spoon.reflect.code.CtConstructorCall;
import spoon.reflect.declaration.CtClass;
import spoon.reflect.declaration.CtType;

public class OWASPTestsuite extends Testsuite {

	
	@Override
	public List<File> getClasspath() {
		
		List<File> cp = new ArrayList<File>();
		try {
			cp.addAll(MavenDependencyUtils.downloadMavenDependenciesFromProject(new File("../Input/BenchmarkJava/")));
			//cp.add(MavenDependencyUtils.downloadMavenArtifact("org.hibernate.validator", "hibernate-validator", "6.0.13.Final"));
			//cp.add(MavenDependencyUtils.downloadMavenArtifact("jakarta.validation", "jakarta.validation-api", "3.0.1"));
			

		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		return cp;
	}

	@Override
	public TestcaseServletAdapter getTestcaseServletAdapter() {
		return new OWASPServletAdapter();
	}

	@Override
	public Map<String, String> getAdditionalClasses() {
		Map<String, String> cls = new HashMap<>();
		try {

			cls.put("de.fraunhofer.sit.runexploits.environment.OWASPEnvironment", 
					FileUtils.readFileToString(
							new File("../RunExploits/src/main/java/de/fraunhofer/sit/runexploits/environment/OWASPEnvironment.java")));
			
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		
		
		return cls;
	}
	@Override
	public String getName() {
		return "OWASP";
	}

	@Override
	public Map<String, String> getAdditionalFiles() {
		HashMap<String, String> files = new HashMap<>();
		File resources = new File("../Input/BenchmarkJava/src/main/resources");
		for (File f : resources.listFiles()) {
			try {
				String c = FileUtils.readFileToString(f);
				files.put("WEB-INF/classes/"+f.getName(), c);
				files.put(f.getName(), c);
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return files;
	}
	

}
