package de.fraunhofer.sit.specifications.attackoutputs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Phaser;
import java.util.concurrent.Semaphore;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackinputs.Input;
import de.fraunhofer.sit.specifications.attackinputs.Run;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class ExecutesBinary extends Output {
	
	public String binarypath;


	public  class Template {
	
		
		static void processOutput() throws Exception {
			// we don't need to do anything here
		    
		}
		
	}
	
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}
	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> renames = new HashMap();
		return renames;
	}
	@Override
	public String getTagName() {
		return "ExecutesBinary";
	}

	@Override
	public void readIn(Node node) {
		binarypath = XMLUtils.getAttributeValue(node, "binarypath");
	}

	
}
