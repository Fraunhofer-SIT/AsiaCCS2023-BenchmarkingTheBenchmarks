package de.fraunhofer.sit.specifications.attackinputs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Phaser;

import org.codehaus.plexus.util.xml.XmlUtil;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.data.Data;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class StdIn extends Input {
	
	public Data data;
	public String reference;
	
	public  class Template {
		
		static Process process_x;
		static Phaser attackFinished;

		
		static void attackStep(byte[] input) throws IOException {
			attackFinished.register();
			
			
			new Thread() {
				private void input() throws Exception {
					Thread.sleep(1000);
					OutputStream programOutputStream = process_x.getOutputStream();
					System.out.println("[STDIN] got outputstream " + System.identityHashCode(process_x.getOutputStream()));
					programOutputStream.flush();
					System.out.println("[STDIN] writing " + new String(input).replace("\r", "\\r") + " bytes to stdin");
					System.out.println("[STDIN] writing " + input.length + " bytes to stdin");
					
					programOutputStream.write(input);
					programOutputStream.flush();
				}
				@Override
				public void run() {
					
					try {
						input();
					} catch (Exception e) {
						e.printStackTrace();
					}
					System.out.println("[STDIN] finished");
					attackFinished.arriveAndDeregister();
					
				}
			}.start();
		}
	}
	
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public String getTagName() {
		return "StdIn";
	}

	@Override
	public void readIn(Node node) {
		data = Data.parse(node.getFirstChild());
		reference = XMLUtils.getAttributeValue(node, "reference", "process0");
	}

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> renames = new HashMap<>();
		renames.put("process_x", reference);
		return renames;
	}
	
	@Override
	public List<Object> getParameterValues() {
		List<Object> l = new ArrayList<>();
		l.add(data);
		return l;
	}

	@Override
	boolean isPreLaunch() {
		// TODO Auto-generated method stub
		return false;
	}
}
