package de.fraunhofer.sit.specifications.attackoutputs;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.plaf.ProgressBarUI;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.codegen.ITakesParameters;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class DatabaseOutput extends Output implements ITakesParameters {
	public String connection;
	public String statement;
	
	public String destination;
	public  class Template {

		static String programOutput = "";
		static void processOutput(String connectionString, String statement) throws Exception {
			if (statement != null) {
				Thread.sleep(2000);
				System.out.println("[DatabaseOutput] connecting to " + connectionString);
				Connection connection = DriverManager.getConnection(connectionString, null, null);
				
				try {
					DatabaseMetaData md = connection.getMetaData();
					ResultSet rs = md.getTables(null, null, "%", null);
					int c = 0;
					System.out.print("\n[DatabaseOutput] found tables: ");
					while (rs.next()) {
						System.out.print(rs.getString(3) + " ");
						c++;
					}
					System.out.println("\n[DatabaseOutput] table count: " + c);
					ResultSet executeQuery = connection.prepareStatement(statement).executeQuery();
					while (executeQuery.next()) {
						for (int i = 0; i < executeQuery.getMetaData().getColumnCount(); i++) {
							// TODO: this will crash. do we need every column or should we be able to specify?
							
							programOutput += executeQuery.getString(i + 1);
							
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				} finally {
					try {
						connection.close();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		}
	}
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}
	
	@Override
	public List<Object> getParameterValues() {
		List<Object> params = new ArrayList<>();
		params.add(connection);
		params.add(statement);
		return params;
	} 

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String,String> renames = new HashMap<>();
		renames.put("programOutput", destination);
		return renames;
	}
	@Override
	public String getTagName() {
		// TODO Auto-generated method stub
		return "DatabaseOutput";
	}

	@Override
	public void readIn(Node node) {
		connection = XMLUtils.getAttributeValue(node, "connection");
		statement = XMLUtils.getAttributeValue(node, "statement", null);
		destination = XMLUtils.getAttributeValue(node, "destination", "programOutput");
	}

}
