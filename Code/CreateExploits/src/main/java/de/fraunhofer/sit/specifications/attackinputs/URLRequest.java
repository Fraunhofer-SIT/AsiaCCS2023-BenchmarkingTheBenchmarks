package de.fraunhofer.sit.specifications.attackinputs;

import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.Phaser;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.data.BinaryInputData;
import de.fraunhofer.sit.specifications.data.Data;
import de.fraunhofer.sit.specifications.data.StringInputData;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

/**
 * Starts a URL request as specified. Stores the URLConnection in a field specified by `id`
 */
public class URLRequest extends Input {
	private String id;
	
	
	private String url;
	private String method;
	private List<HTTPRequestHeader> requestHeaders;

	private Data data;
	
	@Override
	public String getTagName() {
		return "URLRequest";
	}

	@Override
	public void readIn(Node node) {
		url = XMLUtils.getAttributeValue(node, "url", null);
		method = XMLUtils.getAttributeValue(node, "method");
		id = XMLUtils.getAttributeValue(node, "id");
		requestHeaders = new ArrayList<>();
		Node headersNode = XMLUtils.getFirstChildNodeByName(node, "HTTPHeaders");
		if (headersNode != null) {
			readChildsIntoCollection(headersNode, requestHeaders);
		}
		Node stringData = XMLUtils.getFirstChildNodeByName(node, new StringInputData().getTagName());
		if (stringData != null) {
			data = new StringInputData();
			data.readIn(stringData);
		} 
		Node binaryData = XMLUtils.getFirstChildNodeByName(node, new BinaryInputData().getTagName());
		if (binaryData != null) {
			data = new BinaryInputData();
			data.readIn(binaryData);
		} 
		
		
	}
	
	public  class Template {

		static Phaser attackFinished;
		
		static HttpURLConnection urlrequest_x;
		
		public static void attackStep(String url, String method, Map<String,String> requestProperties, byte[] data) throws Exception {
			attackFinished.register();
			new Thread() {
				private void perform() throws Exception {
					
					System.out.println("[URLREQUEST] " + method + " " + url + " " + requestProperties.toString());
					URL u = new URL(url);
					urlrequest_x = (HttpURLConnection) u.openConnection();
					urlrequest_x.setRequestMethod(method);
					urlrequest_x.setInstanceFollowRedirects(false);
					if (requestProperties != null) {
						for (Entry<String, String> p : requestProperties.entrySet()) {
							urlrequest_x.addRequestProperty(p.getKey(), p.getValue());
						}
					}
					
					if (data != null) {
						urlrequest_x.setDoOutput(true);
						urlrequest_x.setRequestProperty("Content-Type", "multipart/form-data");

					}
					
					urlrequest_x.setReadTimeout(10000);
					System.out.println("[URLREQUEST] connect.");
					urlrequest_x.connect();
					if (data != null) {
						OutputStream os = urlrequest_x.getOutputStream();
						System.out.println("[URLREQUEST] writing " + data.length + " bytes to connection");
						os.write(data);
						os.flush();
					}
					System.out.println("[URLREQUEST] HTTP " + urlrequest_x.getResponseCode());
					
				}
				@Override
				public void run() {
					try {
						perform();
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					attackFinished.arriveAndDeregister();
				}
			}.start();
			
			Thread.sleep(500);
			while (urlrequest_x == null) {

				Thread.sleep(500);
			}
			System.out.println("[URLREQUEST] request process initiated. continuing attack.");
			

		}
	}

	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	boolean isPreLaunch() {
		return false;
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> params = new ArrayList<>();
		params.add(url);
		params.add(method);
		HashMap<String,String> requestPropertiesMap = new HashMap<>();
		for (HTTPRequestHeader i : requestHeaders) {
			requestPropertiesMap.put(i.name, i.value);
		}
		params.add(requestPropertiesMap);
		params.add(data);
		return params;
	}
	
	@Override
	public boolean shouldURLEncodeParameter(int index) {
		// we want url encoding to be defined by attack pattern
		
		return false;
	}

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String,String> fields = new HashMap<>();
		fields.put("urlrequest_x", id);
		return fields;
	}
	
	
}
