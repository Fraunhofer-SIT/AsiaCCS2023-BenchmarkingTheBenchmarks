package de.fraunhofer.sit.specifications.attackoutputs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.TimeoutException;
import java.util.stream.Collectors;

import org.codehaus.plexus.util.xml.XmlUtil;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class URLRequestResponse extends Output {
	// the urlrequest for which we want to get a response.
	// the generator of URLRequest will store a HttpConnection in a field with this id.
	String reference;
	String destination;
	public  class Template {
		
		static HttpURLConnection urlrequest_x;
		
		static String programOutput = "";
		static boolean outputTimedout = false;

		public static void processOutput() throws IOException {
			BufferedReader br = null;
			System.out.println("[URLREQUESTRESPONSE] processing response");
			int tries = 20;
			while (tries > 0) {
				try {
					tries--;
					Thread.sleep(1000);
					// this is an easy way to async check whether we are connected.
					urlrequest_x.setRequestProperty(null, null);
				} catch (InterruptedException e) {
					
				} catch (IllegalStateException e) {
					break;
				}
			}
			if (100 <= urlrequest_x.getResponseCode() && urlrequest_x.getResponseCode() <= 399) {
				System.out.println("[URLREQUESTRESPONSE] processing standard input stream");
				br = new BufferedReader(new InputStreamReader(urlrequest_x.getInputStream()));
			} else {
				System.out.println("[URLREQUESTRESPONSE] processing error stream");
				InputStream es = urlrequest_x.getErrorStream();
				// fall back ?
				if (es == null)
					es = urlrequest_x.getInputStream();
				
				if (es != null)
					br = new BufferedReader(new InputStreamReader(es));
				
			}
			String responseBody = "";
			if (br == null) {
				System.out.println("[URLREQUESTRESPONSE] response inputstream null...");
			} else {
				try {
					responseBody = String.join("\n", br.lines().collect(Collectors.joining()));
				} catch (Exception e){
					System.out.println("[URLREQUESTRESPONSE] failed to collect output");
					e.printStackTrace();
					outputTimedout = true;
				}
			}
			for (Entry<String, List<String>> header : urlrequest_x.getHeaderFields().entrySet()) {
				System.out.println("[URLREQUESTRESPONSE] " + header.getKey() + ": " + String.join(",", header.getValue()));
			}
			System.out.println("[URLREQUESTRESPONSE] " + responseBody + " [END]");
			
			programOutput += responseBody;
		}
	}

	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String,String> fields = new HashMap<>();
		fields.put("urlrequest_x", reference);
		fields.put("programOutput", destination);
		fields.put("outputTimedout", "outputTimedout");
		return fields;
	}

	@Override
	public String getTagName() {
		// TODO Auto-generated method stub
		return "URLRequestResponse";
	}

	@Override
	public void readIn(Node node) {
		reference = XMLUtils.getAttributeValue(node, "reference");
		destination = XMLUtils.getAttributeValue(node, "destination", "programOutput");
	}


}
