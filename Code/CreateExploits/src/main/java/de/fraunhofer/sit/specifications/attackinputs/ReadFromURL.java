package de.fraunhofer.sit.specifications.attackinputs;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.AbstractHandler;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.data.Data;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class ReadFromURL extends Input {
	Data data;
	public String host;
	int port;
	
	 class Template {
		static Server server;
		static void attackStep(int port, byte[] data) throws Exception {
			if (server != null) {
				server.stop();
				Thread.sleep(3000);
			}
			System.out.println("[READFROMURL] starting server");

			server = new Server(port);
	        server.setHandler(new AbstractHandler() {
				
				@Override
				public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)
						throws IOException, ServletException {

					System.out.println("[READFROMURL] request " + target);
					char[] charData = new char[data.length];
					for (int i = 0; i < data.length; i++) {
						charData[i] = (char)data[i];
					}
					response.getWriter().write(charData);
					response.getWriter().close();
				}

			});

	        server.start();
	        //server.join();
		}
		
	}
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public String getTagName() {
		// TODO Auto-generated method stub
		return "ReadFromURL";
	}

	@Override
	public void readIn(Node node) {
		data = Data.parse(node.getFirstChild());
		host = XMLUtils.getAttributeValue(node, "host");
		port = Integer.valueOf(XMLUtils.getAttributeValue(node, "port"));
	}
	@Override
	public Map<String, String> getFieldRenames() {
		Map<String,String> fields = new HashMap<>();
		fields.put("server", "server");
		return fields;
	}
	@Override
	public List<Object> getParameterValues() {
		List<Object> l = new ArrayList<>();
		
		l.add(port);
		l.add(data);
		return l;
	}

	@Override
	boolean isPreLaunch() {
		// TODO Auto-generated method stub
		return false;
	}

}
