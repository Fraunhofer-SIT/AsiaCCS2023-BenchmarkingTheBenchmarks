package de.fraunhofer.sit.specifications.attackoutputs;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.testcases.TestCase;
public class DummyDatabaseCredentialsOutput extends Output {

	public static class Template {
		static String databaseCredentialsUsername;
		static String databaseCredentialsPassword;
		
		static String programOutput;
		static void processOutput() throws Exception {
			File f = new File("/dbcredentials.txt");
			long startTime = System.currentTimeMillis();
			while (!f.exists()) {
				Thread.sleep(1000);
				if (System.currentTimeMillis() - startTime > 10 * 1000) {
					System.err.println("[DummyDatabaseCredentialsOutput] timeout");
					return;
				}
			}
			
			try (BufferedReader fr = new BufferedReader(new FileReader(f))) {
				databaseCredentialsUsername = fr.readLine();
				databaseCredentialsPassword = fr.readLine();
			}
			programOutput += databaseCredentialsUsername + " " + databaseCredentialsPassword;
		}
	}
	
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public String getTagName() {
		// TODO Auto-generated method stub
		return "DummyDatabaseCredentialsOutput";
	}

	@Override
	public void readIn(Node node) {
		// TODO Auto-generated method stub
		
	}
	

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> fields = new HashMap<>();
		fields.put("databaseCredentialsUsername", "databaseCredentialsUsername");
		fields.put("databaseCredentialsPassword", "databaseCredentialsPassword");
		fields.put("programOutput", "programOutput");
		return fields;
	}
	
}
