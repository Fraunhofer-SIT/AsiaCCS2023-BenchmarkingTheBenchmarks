package de.fraunhofer.sit.specifications.exploitcheckers;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang3.StringEscapeUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.NodeTraversor;
import org.jsoup.select.NodeVisitor;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackpatterns.Presets;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.codegen.IGenerateCode;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class RegexExploitChecker extends SuccessfulExploitIndicator implements IGenerateCode {

	public String pattern;
	public String reference;


	public static class TemplateRegex {
		
		
		static String programOutput = "";


		public static boolean checkOutput(String pattern) throws IOException {
			java.util.regex.Pattern regex = java.util.regex.Pattern.compile(pattern);
			System.out.println("[OUTPUTCONTAINSREGEX] Searching for substring matching " + pattern);
			return regex.matcher(programOutput).find();
		}

	}

	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(TemplateRegex.class, getFieldRenames());

	}
	
	@Override
	public List<Object> getParameterValues() {
		List<Object> params = new ArrayList<>();
		params.add(pattern);
		return params;
	}

	@Override
	public String getTagName() {
		return "OutputContainsRegex";
	}

	@Override
	public void readIn(Node node) {
		reference = XMLUtils.getAttributeValue(node, "reference", "programOutput");
		pattern = node.getTextContent();
	}
	
	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> fields = new HashMap<>();
		fields.put("programOutput", reference);
		return fields;
	}

}
