package de.fraunhofer.sit.specifications.exploitcheckers;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import org.apache.commons.lang3.StringEscapeUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.NodeTraversor;
import org.jsoup.select.NodeVisitor;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackpatterns.Presets;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.codegen.IGenerateCode;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class FileContentsLeakedChecker extends SuccessfulExploitIndicator implements IGenerateCode {

	public String filepath;
	// implicitly always check program output.
	
	public String reference;


	
	public static class TemplateSubstring {
		
		
		
		static String programOutput = "";


		public static boolean checkOutput(String filepath) throws Exception {
			System.out.println("[OutputContainsLineOfFile] looking for nonempty line of " + filepath + " in >>>"+programOutput+ "<<<");
			String line = null;
			File f = new File(filepath);
			FileReader fr = new FileReader(f);
			try (BufferedReader reader = new BufferedReader(fr)) {
				
				while ((line = reader.readLine()) != null) {
					if (!line.isEmpty() && programOutput.contains(line)) {
						return true;
					}
				}
			}
			return false;
		}

	
	}

	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(TemplateSubstring.class, getFieldRenames());
	}

	@Override
	public String getTagName() {

		return "OutputContainsLineOfFile";
	}

	@Override
	public void readIn(Node node) {
		reference = XMLUtils.getAttributeValue(node, "reference", "programOutput");
		filepath = XMLUtils.getAttributeValue(node, "filename");
	}

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> fields = new HashMap<>();
		fields.put("programOutput", reference);
		return fields;
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> params = new ArrayList<>();
		params.add(filepath);
		return params;
	}
	
	
}
