package de.fraunhofer.sit.specifications.util;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

import de.fraunhofer.sit.specifications.attackpatterns.Presets;
import de.fraunhofer.sit.specifications.testcases.TestCase;

public class ParseModels {

	public static List<TestCase> parseTestCases() throws SAXException, IOException, ParserConfigurationException {
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

		Document models = docBuilder.parse(new File("../Output/Models.xml"));
		List<TestCase> testcases = new ArrayList<>();
		for (Node m : XMLUtils.getXMLIterator(models.getFirstChild().getChildNodes())) {
			if (m.getNodeName().equals("Test")) {
				TestCase testCase = new TestCase();
				testCase.readIn(m);
				testcases.add(testCase);
			}
		}
		return testcases;
	}

	public static Presets loadPresets() throws ParserConfigurationException, SAXException, IOException {
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document presets = docBuilder.parse(new File("../Output/Presets.xml"));
		Presets ppresets = Presets.load(presets);
		return ppresets;
	}

}
