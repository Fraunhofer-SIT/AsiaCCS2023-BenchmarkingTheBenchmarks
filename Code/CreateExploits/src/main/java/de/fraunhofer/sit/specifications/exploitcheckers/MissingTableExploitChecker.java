package de.fraunhofer.sit.specifications.exploitcheckers;

import java.io.File;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackoutputs.DatabaseOutput;
import de.fraunhofer.sit.specifications.attackoutputs.Output;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.codegen.IGenerateCode;
import de.fraunhofer.sit.specifications.environment.Database;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.IXMLReadable;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class MissingTableExploitChecker extends SuccessfulExploitIndicator {
	public String deleteTablename;
	public String existTablename;
	
	static class Template {
		public static boolean initialise(String tablename) {
			return false;
			
		}
		public static boolean checkOutput(String connectionString, String deletedTablename, String existingTableName) throws Exception {
			System.out.println(String.format("[MissingTableExploitChecker] verifying that '%s' exists and '%s' was deleted", existingTableName, deletedTablename));
			Connection db = java.sql.DriverManager.getConnection(connectionString, null, null);
			DatabaseMetaData md = db.getMetaData();
			ResultSet rs = md.getTables(null, null, "%", null);
			boolean canaryTableFound = false;
			while (rs.next()) {
				System.out.println("[MissingTableExploitChecker] found table '" + rs.getString(3) + "'");
				if (deletedTablename.toLowerCase().equals(rs.getString(3).toLowerCase())) {
					db.close();
					System.out.println(String.format("[MissingTableExploitChecker] table %s still exists", deletedTablename));

					return false;
				}
				if (existingTableName.toLowerCase().equals(rs.getString(3).toLowerCase())) {
					
					System.out.println(String.format("[MissingTableExploitChecker] table %s exists. Pre exploit-execution table creation was successful. ", existingTableName));
					canaryTableFound = true;
				}
				
			}
			db.close();
			if (!canaryTableFound) {
				System.out.println(String.format("[MissingTableExploitChecker] Exploit verification failed: table %s does not exist", existingTableName));
				return false;
			}
			System.out.println(String.format("[MissingTableExploitChecker] Exploit verification successful: table %s was created, and %s was deleted", existingTableName, deletedTablename));
			
			return true;
		}
	}
	@Override
	public String getTagName() {
		return "MissingSqlTable";
	}

	@Override
	public void readIn(Node node) {
		deleteTablename = XMLUtils.getAttributeValue(node, "deletetablename");

		existTablename = XMLUtils.getAttributeValue(node, "existtablename");
	}

	// not in specification, but testcase-dependent
	private String connectionString;
	
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		for (Output o : testcase.outputs) {
			if (o instanceof DatabaseOutput) {
				connectionString = ((DatabaseOutput) o).connection;
			}
		}
		if (connectionString == null) {
			throw new RuntimeException("MissingTableExploitChecker without DatabaseOutput. Please add DatabaseOutput.");
		}
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> params = new ArrayList<>();
		params.add(connectionString);
		params.add(deleteTablename);
		params.add(existTablename);
		
		return params;
	}

}
