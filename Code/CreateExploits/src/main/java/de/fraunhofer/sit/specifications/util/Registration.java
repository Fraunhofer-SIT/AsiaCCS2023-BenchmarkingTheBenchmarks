package de.fraunhofer.sit.specifications.util;

import java.util.HashMap;
import java.util.Map;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackinputs.BinaryDataParameter;
import de.fraunhofer.sit.specifications.attackinputs.ConnectToRemoteSocket;
import de.fraunhofer.sit.specifications.attackinputs.DatabaseInput;
import de.fraunhofer.sit.specifications.attackinputs.EnvironmentVariable;
import de.fraunhofer.sit.specifications.attackinputs.EnvironmentVariables;
import de.fraunhofer.sit.specifications.attackinputs.FileRead;
import de.fraunhofer.sit.specifications.attackinputs.HTTPRequestHeader;
import de.fraunhofer.sit.specifications.attackinputs.InputDataAssignment;
import de.fraunhofer.sit.specifications.attackinputs.LoadLibrary;
import de.fraunhofer.sit.specifications.attackinputs.NoInput;
import de.fraunhofer.sit.specifications.attackinputs.OpenServerSocket;
import de.fraunhofer.sit.specifications.attackinputs.PropertiesFileParameter;
import de.fraunhofer.sit.specifications.attackinputs.ReadFromRemoteSocket;
import de.fraunhofer.sit.specifications.attackinputs.ReadFromServerSocket;
import de.fraunhofer.sit.specifications.attackinputs.ReadFromURL;
import de.fraunhofer.sit.specifications.attackinputs.RestartEnvironment;
import de.fraunhofer.sit.specifications.attackinputs.Run;
import de.fraunhofer.sit.specifications.attackinputs.StdIn;
import de.fraunhofer.sit.specifications.attackinputs.StringParameter;
import de.fraunhofer.sit.specifications.attackinputs.URLRequest;
import de.fraunhofer.sit.specifications.attackoutputs.DatabaseOutput;
import de.fraunhofer.sit.specifications.attackoutputs.DummyDatabaseCredentialsOutput;
import de.fraunhofer.sit.specifications.attackoutputs.ExecutesBinary;
import de.fraunhofer.sit.specifications.attackoutputs.NoOutput;
import de.fraunhofer.sit.specifications.attackoutputs.StdErrAsync;
import de.fraunhofer.sit.specifications.attackoutputs.StdOut;
import de.fraunhofer.sit.specifications.attackoutputs.StdOutAsync;
import de.fraunhofer.sit.specifications.attackoutputs.URLRequestResponse;
import de.fraunhofer.sit.specifications.attackoutputs.URLRequestResponseCookie;
import de.fraunhofer.sit.specifications.attackoutputs.URLRequestResponseHeader;
import de.fraunhofer.sit.specifications.attackoutputs.WriteToFile;
import de.fraunhofer.sit.specifications.attackoutputs.WriteToRemoteSocket;
import de.fraunhofer.sit.specifications.attackoutputs.WriteToServerSocket;
import de.fraunhofer.sit.specifications.attackpatterns.AttackPatternPreset;
import de.fraunhofer.sit.specifications.attackpatterns.RepeatInput;
import de.fraunhofer.sit.specifications.executionprofile.JavaMethodExecution;
import de.fraunhofer.sit.specifications.executionprofile.servletcontainers.ServletWrapperProvider;
import de.fraunhofer.sit.specifications.exploitcheckers.BinaryExecuted;
import de.fraunhofer.sit.specifications.exploitcheckers.ConnectedToDummyDatabaseWithCredentials;
import de.fraunhofer.sit.specifications.exploitcheckers.Crash;
import de.fraunhofer.sit.specifications.exploitcheckers.ExecutionDurationTimeout;
import de.fraunhofer.sit.specifications.exploitcheckers.ExitCode;
import de.fraunhofer.sit.specifications.exploitcheckers.FileContentsLeakedChecker;
import de.fraunhofer.sit.specifications.exploitcheckers.FileExceedsSize;
import de.fraunhofer.sit.specifications.exploitcheckers.MissingFileExploitChecker;
import de.fraunhofer.sit.specifications.exploitcheckers.MissingTableExploitChecker;
import de.fraunhofer.sit.specifications.exploitcheckers.OutOfMemory;
import de.fraunhofer.sit.specifications.exploitcheckers.OutputExceedsSize;
import de.fraunhofer.sit.specifications.exploitcheckers.OutputIncludesEnvironmentVar;
import de.fraunhofer.sit.specifications.exploitcheckers.OutputTimeout;
import de.fraunhofer.sit.specifications.exploitcheckers.RegexExploitChecker;
import de.fraunhofer.sit.specifications.exploitcheckers.SqlQueryResultEquals;
import de.fraunhofer.sit.specifications.exploitcheckers.SubstringExploitChecker;
import de.fraunhofer.sit.specifications.exploitcheckers.URLRequestResponseContainsHeader;
import de.fraunhofer.sit.specifications.exploitcheckers.UnescapedHTMLExploitChecker;
import de.fraunhofer.sit.specifications.testcases.PackageSource;
import de.fraunhofer.sit.specifications.testcases.TestCaseClass;

public class Registration {
	public static final IXMLReadable[] READABLE = new IXMLReadable[] { new AttackPatternPreset(), new InputDataAssignment(), new URLRequest(), new URLRequestResponse(), new MissingFileExploitChecker(), new StringParameter(), new SubstringExploitChecker(), new UnescapedHTMLExploitChecker(), new RegexExploitChecker(), new FileContentsLeakedChecker(), new MissingTableExploitChecker(), new HTTPRequestHeader(), new URLRequestResponseHeader(), new URLRequestResponseContainsHeader(), new JavaMethodExecution(), new DatabaseOutput(), new DatabaseInput(), new StdOut(), new StdIn(), new EnvironmentVariables(), new WriteToServerSocket(), new WriteToRemoteSocket() , new ReadFromRemoteSocket(), new ReadFromServerSocket(), new FileRead(), new ReadFromURL(), new EnvironmentVariable(), new Crash(), new TestCaseClass(), new PackageSource(), new RepeatInput(), new OutputTimeout(), new NoInput(), new Run(), new URLRequestResponseCookie(), new ConnectToRemoteSocket(), new StdOutAsync(), new OpenServerSocket(), new OutOfMemory(), new NoOutput(), new FileExceedsSize(), new PropertiesFileParameter(), new WriteToFile(), new OutputExceedsSize(), new ExecutionDurationTimeout(), new BinaryExecuted(), new ExecutesBinary(), new ExitCode(), new LoadLibrary(), new ConnectedToDummyDatabaseWithCredentials(), new DummyDatabaseCredentialsOutput(), new SqlQueryResultEquals(), new ServletWrapperProvider(), new StdErrAsync(), new RestartEnvironment(), new OutputIncludesEnvironmentVar(), new BinaryDataParameter()};

	private static final Map<String, IXMLReadable> tagToReader = new HashMap<>();

	static {
		
		for (IXMLReadable r : READABLE) {
			IXMLReadable prev = tagToReader.put(r.getTagName(), r);
			if (prev != null)
				throw new IllegalArgumentException("Multiple registrations: " + r.getTagName());
		}
	}

	public static <T extends IXMLReadable> T readIn(Node node) {
		IXMLReadable r = tagToReader.get(node.getNodeName());
		if (r == null)
			throw new IllegalArgumentException("Node " + node.getNodeName() + " unsupported");

		try {
			IXMLReadable l = r.getClass().newInstance();
			l.readIn(node);
			return (T) l;
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
}
