package de.fraunhofer.sit.specifications.attackinputs;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.imageio.spi.RegisterableService;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class EnvironmentVariables extends Input {

	List<EnvironmentVariable> variables;
	
	public class Template {
		static HashMap<String,String> environment;
		static void attackStep(Map<String,String> environmentVariables) {
			environment = new HashMap<>();
			environment.putAll(environmentVariables);
		}
	}
	
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public String getTagName() {
		return "EnvironmentVariables";
	}

	@Override
	public void readIn(Node node) {
		variables = new ArrayList<>();
		readChildsIntoCollection(node, variables);
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> l = new ArrayList<>();
		
		HashMap<String, String> map = new HashMap<>();
		for (EnvironmentVariable e : variables) {
			map.put(e.key, e.value);
		}
		l.add(map);
		return l;
	}
	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> renames = new HashMap<>();
		renames.put("environment", "environment");
		return renames;
	}
	@Override
	boolean isPreLaunch() {
		// TODO Auto-generated method stub
		return true;
	}

}
