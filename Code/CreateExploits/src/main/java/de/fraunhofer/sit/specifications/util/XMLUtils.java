package de.fraunhofer.sit.specifications.util;

import java.util.Iterator;

import org.w3c.dom.CharacterData;
import org.w3c.dom.Comment;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;

public class XMLUtils {

	/**
	 * Returns the attribute of a given node. If there is no attribute in node which
	 * has the given attribute name, it returns a default value.
	 * 
	 * @param node          the node
	 * @param attributeName the attribute name
	 * @param def           the default value
	 * @return the node or null
	 */
	public static String getAttributeValue(Node node, String attributeName, String def) {
		Node foundAttribute = node.getAttributes().getNamedItem(attributeName);
		if (foundAttribute == null)
			return def;
		return foundAttribute.getNodeValue();
	}

	/**
	 * Returns the attribute of a given node. If there is no attribute in node which
	 * has the given attribute name, it throws an exception.
	 * 
	 * @param node          the node
	 * @param attributeName the attribute name
	 * @return the node or null
	 */
	public static String getAttributeValue(Node node, String attributeName) {
		Node foundAttribute = node.getAttributes().getNamedItem(attributeName);
		if (foundAttribute == null)
			throw new IllegalArgumentException(
					"Attribute " + attributeName + " was not found in " + node.getNodeName());
		return foundAttribute.getNodeValue();
	}

	public static Iterable<Node> getXMLIterator(final NodeList nodeList) {
		if (nodeList.getLength() == 0)
			return java.util.Collections.emptyList();

		return new Iterable<Node>() {

			@Override
			public Iterator<Node> iterator() {
				return new Iterator<Node>() {
					int index = 0;

					@Override
					public Node next() {
						return nodeList.item(index++);
					}

					@Override
					public boolean hasNext() {
						while (index < nodeList.getLength()
								&& (nodeList.item(index) instanceof Text || nodeList.item(index) instanceof Comment)) {
							index++;
						}
						return index < nodeList.getLength();
					}
				};
			}

		};
	}

	/**
	 * Returns the child node with the given node name or null if none
	 * 
	 * @param parent        the parent to check
	 * @param childNodeName the string to seek
	 * @return the child node with the given node name or null
	 */
	public static Node getFirstChildNodeByName(Node parent, String childNodeName) {
		if (parent == null)
			return null;
		for (Node probeChild : getXMLIterator(parent.getChildNodes())) {
			if (probeChild == null)
				continue;

			if (probeChild.getNodeName().equals(childNodeName))
				return probeChild;
		}
		return null;
	}
}
