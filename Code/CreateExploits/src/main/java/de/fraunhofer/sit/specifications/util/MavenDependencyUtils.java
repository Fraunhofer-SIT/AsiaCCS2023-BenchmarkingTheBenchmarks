package de.fraunhofer.sit.specifications.util;

import java.io.File;
import java.io.InputStream;
import java.lang.ProcessBuilder.Redirect;
import java.net.URL;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MavenDependencyUtils {
	
	private static Map<String, Collection<File>> mavenProjectDependencyCache = new HashMap<>();
	/**
	 * Download an artifact from maven central to tmp
	 * @param destinationDirectory
	 * @param groupId
	 * @param artifactId
	 * @param version
	 * @throws Exception
	 */
	public static File downloadMavenArtifact(String groupId, String artifactId, String version) throws Exception {
		//org/eclipse/jetty/jetty-util/11.0.8/jetty-util-11.0.8.jar
		String url = getMavenArtifactURL(groupId, artifactId, version, "jar");
		String filename = String.format("%s-%s.jar", artifactId, version);
		File tmpFile = new File("/tmp", filename);
		if (!tmpFile.exists()) {
			InputStream in = new URL(url).openStream();
			try {
				Files.copy(in, tmpFile.toPath());
			} catch (FileAlreadyExistsException e) {
				// we are multithreaded, this can happen now...
			}
		}
		return tmpFile;
	}
	
	public static String getMavenArtifactURL(String groupId, String artifactId, String version, String extension) {
		return String.format("https://repo1.maven.org/maven2/%s/%s/%s/%s-%s.%s", groupId.replaceAll("\\.", "/"), artifactId, version, artifactId, version, extension);

	}
	
	/**
	 * Download all dependencies for a given maven project into a directory called "lib"
	 * @param mavenProject the path to a maven project 
	 * @return a list of downloaded jars
	 * @throws Exception
	 */
	public static Collection<File> downloadMavenDependenciesFromProject(File mavenProject) throws Exception {
		Collection<File> list = mavenProjectDependencyCache.get(mavenProject.getAbsolutePath());
		if (list != null) {
			return list;
		}
		File libDir = new File(mavenProject, "lib");
		File pom = new File(mavenProject, "pom.xml");
		if (libDir.lastModified() < pom.lastModified()) {
			ProcessBuilder pb = new ProcessBuilder("/usr/bin/bash", "-c", "/usr/bin/mvn org.apache.maven.plugins:maven-dependency-plugin:2.8:copy-dependencies -DoutputDirectory=lib");
			pb.directory(mavenProject);
			pb.start();
			pb.redirectErrorStream(true);
			pb.redirectOutput(Redirect.INHERIT);
			Process p = pb.start();
			int result = p.waitFor();
			if (result != 0) {
				throw new RuntimeException("failed to download dependencies");
			}
		} else {
			System.out.println("maven dependencies for " + mavenProject.getAbsolutePath() + " have already been downloaded. reusing");
		}
		list = Arrays.asList( libDir.listFiles());
		mavenProjectDependencyCache.put(mavenProject.getAbsolutePath(), list);
		return list;
	}

}
