package de.fraunhofer.sit.specifications.exploitcheckers;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import org.apache.commons.lang3.StringEscapeUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.NodeTraversor;
import org.jsoup.select.NodeVisitor;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackpatterns.Presets;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.codegen.IGenerateCode;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class ConnectedToDummyDatabaseWithCredentials extends SuccessfulExploitIndicator implements IGenerateCode {

	public String passwordMatch;
	public String usernameMatch;

	
	public static class TemplateSubstring {
		
		static String databaseCredentialsUsername;
		static String databaseCredentialsPassword;

		public static boolean checkOutput(String user, String password) {
			
			System.out.println("[DATABASECREDENTIALCHECKER] checking credentials");
			if (user != null && !user.equals(databaseCredentialsUsername)) {
				System.out.println("[DATABASECREDENTIALCHECKER] username mismatch");
				return false;
			}
			if (password != null && !password.equals(databaseCredentialsPassword)) {
				System.out.println("[DATABASECREDENTIALCHECKER] password mismatch");
				return false;
			}
			return true;
		}

	
	}

	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(TemplateSubstring.class, getFieldRenames());
	}

	@Override
	public String getTagName() {

		return "ConnectedToDummyDatabaseWithCredentials";
	}

	@Override
	public void readIn(Node node) {
		passwordMatch = XMLUtils.getAttributeValue(node, "password", null);
		usernameMatch = XMLUtils.getAttributeValue(node, "user", null);
	}

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> fields = new HashMap<>();
		fields.put("databaseCredentialsUsername", "databaseCredentialsUsername");
		fields.put("databaseCredentialsPassword", "databaseCredentialsPassword");
		return fields;
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> params = new ArrayList<>();
		params.add(usernameMatch);
		params.add(passwordMatch);
		return params;
	}
	
	
}
