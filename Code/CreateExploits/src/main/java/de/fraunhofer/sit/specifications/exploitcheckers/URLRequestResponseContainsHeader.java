package de.fraunhofer.sit.specifications.exploitcheckers;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import org.apache.commons.lang3.StringEscapeUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.NodeTraversor;
import org.jsoup.select.NodeVisitor;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackpatterns.Presets;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.codegen.IGenerateCode;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class URLRequestResponseContainsHeader extends SuccessfulExploitIndicator implements IGenerateCode {

	
	public String reference;
	
	public String headerName;
	public String headerValue;

	
	public static class Template {
		static Map<String, List<String>> headers_x;


		public static boolean checkOutput(String headerName, String headerValue) {
			if (headers_x == null) {
				// the testcase doesn't write a header
				System.out.println("[URLRequestResponseContainsHeader] no headers found");
				return false;
			}
			List<String> values = headers_x.get(headerName);
			if (values == null) {
				return false;
			}
			System.out.println("[URLRequestResponseContainsHeader] found header fields" + "'" + String.join("','", values) + "'");
			return values.contains(headerValue);
		}

	
	}

	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public String getTagName() {

		return "URLRequestResponseContainsHeader";
	}

	@Override
	public void readIn(Node node) {
		reference = XMLUtils.getAttributeValue(node, "reference", "request0");
		headerName = XMLUtils.getAttributeValue(node, "headerName");
		headerValue = node.getTextContent();
	}

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> fields = new HashMap<>();
		fields.put("headers_x", reference+"_headers");
		return fields;
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> params = new ArrayList<>();
		params.add(headerName);
		params.add(headerValue);
		return params;
	}
	
	
}
