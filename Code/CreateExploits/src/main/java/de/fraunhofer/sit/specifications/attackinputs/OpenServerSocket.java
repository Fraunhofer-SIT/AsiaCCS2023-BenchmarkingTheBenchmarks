package de.fraunhofer.sit.specifications.attackinputs;

import java.io.IOException;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackinputs.ReadFromRemoteSocket.Template;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.data.Data;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class OpenServerSocket extends Input {
	public String host;
	int port;
	String socketid;
	
	public  class Template {
		static Socket socket;
		static void attackStep(String host, int port) throws IOException {
			System.out.println("[READFROMSERVERSOCKET] Opening socket to " + host + ":" + port);
			socket = new Socket(host, port);

		}
	}
	
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public String getTagName() {
		return "OpenServerSocket";
	}

	@Override
	public void readIn(Node node) {
		port = Integer.valueOf(XMLUtils.getAttributeValue(node, "port"));
		socketid = XMLUtils.getAttributeValue(node, "socketid");
		host = "testcase";
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> l = new ArrayList<>();
		l.add(host);
		l.add(port);
		return l;
	}

	@Override
	boolean isPreLaunch() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String,String> renames = new HashMap<>();
		renames.put("socket", socketid);
		return renames;
	}
}
