package de.fraunhofer.sit.specifications.attackinputs;

import java.io.IOException;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Phaser;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackinputs.ReadFromRemoteSocket.Template;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.data.Data;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class ReadFromServerSocket extends Input {
	public String socketid;
	Data data;
	
	public  class Template {
		static Socket socket;

		static Phaser attackFinished;
		static void attackStep(byte[] data) throws IOException {
			attackFinished.register();
			new Thread() {
				@Override
				public void run() {
					OutputStream o = null;
					try {
						o = socket.getOutputStream();
						System.out.println("[READFROMSERVERSOCKET] Writing data to socket: >>>" + new String(data) + "<<<");
						o.write(data);
					} catch (IOException e) {
						e.printStackTrace();
					} 
					attackFinished.arriveAndDeregister();
				}
			}.start();
			
		}
	}
	
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public String getTagName() {
		return "ReadFromServerSocket";
	}

	@Override
	public void readIn(Node node) {
		data = Data.parse(node.getFirstChild());
		socketid = XMLUtils.getAttributeValue(node, "socketid");
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> l = new ArrayList<>();
		l.add(data);
		return l;
	}

	@Override
	boolean isPreLaunch() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String,String> renames = new HashMap<>();
		renames.put("socket", socketid);
		return renames;
	}
}
