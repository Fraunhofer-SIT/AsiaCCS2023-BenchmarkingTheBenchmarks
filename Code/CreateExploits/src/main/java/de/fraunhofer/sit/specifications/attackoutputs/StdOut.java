package de.fraunhofer.sit.specifications.attackoutputs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class StdOut extends Output {
	
	public String reference;
	public String destination;

	public  class Template {
		
		
		static Process process_x;

		static String programOutput;
		
		static boolean outputTimedout = false;
		
		static void processOutput() throws Exception {
			int timeout = 5000;
			InputStream inputStream = process_x.getInputStream();
			StringBuilder w = new StringBuilder();
			while (true) {
				int wait = 0;
				while (inputStream.available() == 0 ) {
					Thread.sleep(100);
					wait += 100;
					if (wait > timeout) {
						outputTimedout = true;
						programOutput = w.toString();
						System.out.println("[STDOUT] timout while getting program stdoutput. ");
						System.out.println("[STDOUT] output: " + programOutput + "\n[STDOUT] end of output");
						return;
					}
				}
				int r = inputStream.read();
				if (r == -1) {
					break;
				}
				w.append((char)r);
			}
			System.out.println("[STDOUT] stream closed. output: " + programOutput);
        	programOutput = w.toString();
        	
		    
		}
		
	}
	
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}
	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> renames = new HashMap();
		renames.put("process_x", reference);
		renames.put("programOutput", destination);
		renames.put("outputTimedout", "outputTimedout");
		return renames;
	}
	@Override
	public String getTagName() {
		return "StdOut";
	}

	@Override
	public void readIn(Node node) {
		reference = XMLUtils.getAttributeValue(node, "reference", "process0");
		destination = XMLUtils.getAttributeValue(node, "destination", "programOutput");
	}

}
