package de.fraunhofer.sit.specifications.attackoutputs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;

import org.codehaus.plexus.util.xml.XmlUtil;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class URLRequestResponseHeader extends Output {
	// the urlrequest for which we want to get a response.
	// the generator of URLRequest will store a HttpConnection in a field with this id.
	String reference;
	String destination;
	public  class Template {
		
		static HttpURLConnection urlrequest_x;
		
		static Map<String, List<String>> headers_x;

		public static void processOutput() throws IOException {
			headers_x = urlrequest_x.getHeaderFields();
			for (Entry<String, List<String>> header : headers_x.entrySet()) {
				System.out.println("[URLREQUESTRESPONSEHEADER] " + header.getKey() + ": " + String.join(",", header.getValue()));
			}
		}
	}

	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String,String> fields = new HashMap<>();
		fields.put("urlrequest_x", reference);
		fields.put("headers_x", reference+"_headers");
		return fields;
	}

	@Override
	public String getTagName() {
		// TODO Auto-generated method stub
		return "URLRequestResponseHeader";
	}

	@Override
	public void readIn(Node node) {
		reference = XMLUtils.getAttributeValue(node, "reference");
	}
	
	

}
