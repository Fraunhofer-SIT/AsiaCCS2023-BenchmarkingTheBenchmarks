package de.fraunhofer.sit.specifications.executionprofile.servletcontainers;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.ProcessBuilder.Redirect;
import java.net.Socket;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackinputs.Input;
import de.fraunhofer.sit.specifications.attackoutputs.DummyDatabaseCredentialsOutput;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.executionprofile.ExecutionProfile;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.MavenDependencyUtils;
import de.fraunhofer.sit.specifications.util.XMLUtils;
import spoon.Launcher;
import spoon.reflect.declaration.CtClass;

public class WinstoneServletWrapper extends ServletExecutionProfile {
	@Override
	public String getName() {
		return "Winstone";
	}
	public WinstoneServletWrapper(TestCase tc, String classname, String methodname, String path, String processId) {
		super(tc, classname, methodname, path, processId);
	}

	public class Template {
		static Process process;
		static HashMap<String,String> environment;
		public static void startEnvironment() throws Exception {
			if (process != null) {
				Thread.sleep(1000);
				process.destroyForcibly();
				Thread.sleep(1000);
			}
			String cp = "__CLASSPATH__";
			List<String> cmd = new ArrayList<>();
			cmd.addAll(Arrays.asList(new String[]{"java", "-Xmx1024m", "-Djdbc.drivers=de.fraunhofer.sit.runexploits.database.JulietDummyDriver",
					"-cp", cp, "-Djava.naming.factory.initial=de.fraunhofer.sit.runexploits.environment.DummyInitialContext"}));
			if (environment != null) {
				for (Entry<String, String> kv : environment.entrySet()) {
					cmd.add(String.format("-D%s=%s", kv.getKey(), kv.getValue()));
				}
			}
			cmd.add("de.fraunhofer.sit.runexploits.servletcontainers.WinstoneContainer");
			cmd.add("/usr/src/poc");
			System.out.println("[SERVLETWRAPPER] " + String.join(" ", cmd));
			ProcessBuilder pb = new ProcessBuilder(cmd);
			pb.redirectError(Redirect.INHERIT);
			if (environment != null) {
				pb.environment().putAll(environment);
				System.out.println("[RUN] environment variables: " + environment.toString());

			}
			//pb.redirectOutput(ProcessBuilder.Redirect.INHERIT);
			//pb.redirectError(ProcessBuilder.Redirect.INHERIT);
			process = pb.start();
			Thread.sleep(12000);
			
		}
	}

	

	@Override
	public List<Object> getParameterValues() {
		// TODO Auto-generated method stub
		return null;
	}

	
	@Override
	public Map<String, String> getAdditionalFiles() {
		
		Map<String, String> files = super.getAdditionalFiles();
		files.put("WEB-INF/web.xml", generateWebXml());
		return files;
	}
	
	

	@SuppressWarnings("deprecation")
	@Override
	public Map<String, String> getAdditionalClasses() {
		Map<String, String> cls = super.getAdditionalClasses();
		
		try {
			cls.put("de.fraunhofer.sit.runexploits.servletcontainers.WinstoneContainer", 
					FileUtils.readFileToString(
							new File("../RunExploits/src/main/java/de/fraunhofer/sit/runexploits/servletcontainers/WinstoneContainer.java")));
			
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		
		return cls;
	}

	@Override
	public File getClassesTargetDirectory(File root) {
		return new File(root, "WEB-INF/classes/");
	}

	@Override
	public List<File> getClasspath() {
		List<File> cp = super.getClasspath();
		try {
			cp.addAll(MavenDependencyUtils.downloadMavenDependenciesFromProject(new File("../RunExploits/servletcontainerpoms/winstone")));

			
			
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		return cp;
		
	}

	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		File classDirectoryInContainer = getClassesTargetDirectory(new File("/usr/src/poc"));
		String libDirInContainer = "/usr/src/poc/lib/";
		
		String classpathInContainer = classDirectoryInContainer.toString();
		
		for (File jar : getClasspath()) {
			classpathInContainer += ":" + libDirInContainer + jar.getName();
		}
		Map<String, String> substitutions = new HashMap<>();
		substitutions.put("__CLASSPATH__", classpathInContainer);
		generator.merge(Template.class, getFieldRenames(), substitutions);
	}
	
	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> renames = new HashMap<>();
		renames.put("process", processId);
		renames.put("environment", "environment");
		return renames;
	}

	@Override
	public boolean convertJavaxToJakarta() {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public Map<String, String> getParameters() {
		Map<String, String> params = new HashMap<>();
		params.put("Port", "8080");
		return params;
	}


}
