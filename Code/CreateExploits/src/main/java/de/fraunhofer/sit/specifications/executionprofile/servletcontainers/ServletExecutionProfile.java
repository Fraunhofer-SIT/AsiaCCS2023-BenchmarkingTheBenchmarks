package de.fraunhofer.sit.specifications.executionprofile.servletcontainers;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.management.RuntimeErrorException;

import org.apache.commons.io.FileUtils;

import de.fraunhofer.sit.specifications.attackoutputs.DummyDatabaseCredentialsOutput;
import de.fraunhofer.sit.specifications.executionprofile.ExecutionProfile;
import de.fraunhofer.sit.specifications.executionprofile.servletadapters.TestcaseServletAdapter;
import de.fraunhofer.sit.specifications.testcases.TestCase;

public abstract class ServletExecutionProfile extends ExecutionProfile {
	
	public String classname;
	public String methodname;
	public String path;
	public String processId;
	

	public ServletExecutionProfile(TestCase tc, String classname, String methodname, String path, String processId) {
		super(tc);
		this.classname = classname;
		this.methodname = methodname;
		this.path = path;
		this.processId = processId;
	}


	public abstract boolean convertJavaxToJakarta();
	
	@Override
	public List<File> getClasspath() {
		List<File> cp = super.getClasspath();
		TestcaseServletAdapter adapter = testcase.testsuite.getTestcaseServletAdapter();
		cp.addAll(adapter.getClasspath());
		return cp;
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public Map<String, String> getAdditionalClasses() {
		Map<String, String> cls = super.getAdditionalClasses();
		TestcaseServletAdapter adapter = testcase.testsuite.getTestcaseServletAdapter();
		cls.putAll(adapter.getServletClasses(this, testcase));
		
		try {
			String base = FileUtils.readFileToString(
					new File("../RunExploits/src/main/java/de/fraunhofer/sit/runexploits/servletcontainers/ServletContainerReference.java"));
			String initCode = adapter.getInitializationCode();
			
			if (initCode != null) {
				base = base.replace("/* initialization code */", adapter.getInitializationCode());
			}
			
			cls.put("de.fraunhofer.sit.runexploits.servletcontainers.ServletContainerReference", base);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}

		
		
		return cls;
	}
	
	public String generateWebXml() {
		String header = "<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n"
				+ "         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
				+ "         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n"
				+ "         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n" + "         version=\"3.1\">\n";
		String footer = "\n" + "</web-app>";
		String jdbc = "\n<resource-ref>\n"
				+ "<description>BenchmarkDBDatasource</description>\n"
				+ "<res-ref-name>jdbc/BenchmarkDB</res-ref-name>\n"
				+ "<res-type>javax.sql.DataSource</res-type>\n"
				+ "<res-auth>Container</res-auth>\n"
				+ "</resource-ref>\n";
		
		TestcaseServletAdapter adapter = testcase.testsuite.getTestcaseServletAdapter();

		String webxml = header + jdbc;
		for (Entry<String, String> pathToClass : adapter.getServletPaths(this, testcase).entrySet()) {
			String path = pathToClass.getKey();
			String cls = pathToClass.getValue();
			String servlet = ("    <servlet>\n" + "        <servlet-name>" + cls + "</servlet-name>\n"
								+ "        <servlet-class>" + cls + "</servlet-class>\n" + "    </servlet>\n"
								+ "    <servlet-mapping>\n" + "        <servlet-name>" + cls + "</servlet-name>\n"
								+ "        <url-pattern>" + path + "</url-pattern>\n" + "    </servlet-mapping>\n");
		
			webxml += servlet;
		}
		webxml += footer;
		return webxml;
	}
	
}
