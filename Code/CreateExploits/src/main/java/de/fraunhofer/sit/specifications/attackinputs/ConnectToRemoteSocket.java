package de.fraunhofer.sit.specifications.attackinputs;

import java.io.IOException;
import java.io.OutputStream;
import java.net.BindException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.codehaus.plexus.util.xml.XmlUtil;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.data.Data;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

/**
 * The testcase opens a {@code new Socket("www.example.com", 9090)} and reads from it.
 * To exploit, we have to start a new serversocket at this port and write to it.
 * The environment will be responsible for routing the url to localhost.
 * @author naeumann
 *
 */
public class ConnectToRemoteSocket extends Input {
	public String host;
	public int port;
	public String socketid;
	
	public  class Template {
		static ServerSocket server;
		static void attackStep(int port) throws Exception {	
			if (server != null) {				
				System.out.println("[READFROMREMOTESOCKET] closing serversocket");

				try {
					server.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				server = null;
				Thread.sleep(500);
			}
			System.out.println("[READFROMREMOTESOCKET] Opening socket on port " + port);

			try {
				server = new ServerSocket(port);
			} catch (BindException e) {
				e.printStackTrace();
				Thread.sleep(1000);
				
				System.out.println("[READFROMREMOTESOCKET] retry " + port);
				server = new ServerSocket(port);

			}
		}
	}
	
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public String getTagName() {
		return "ConnectToRemoteSocket";
	}

	@Override
	public void readIn(Node node) {
		
		host = XMLUtils.getAttributeValue(node, "host");
		port = Integer.valueOf(XMLUtils.getAttributeValue(node, "port"));
		socketid = XMLUtils.getAttributeValue(node, "socketid", "socket0");
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> l = new ArrayList<>();
		l.add(port);
		return l;
	}
	 
	@Override
	public Map<String, String> getFieldRenames() {
		Map<String,String> renames = new HashMap<>();
		renames.put("server", socketid);
		return renames;
	}
	@Override
	boolean isPreLaunch() {
		// TODO Auto-generated method stub
		return false;
	}

}
