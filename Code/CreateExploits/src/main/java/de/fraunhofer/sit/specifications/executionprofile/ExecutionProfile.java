package de.fraunhofer.sit.specifications.executionprofile;

import java.io.File;
import java.io.IOException;
import java.lang.ProcessBuilder.Redirect;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.FileUtils;

import de.fraunhofer.sit.specifications.attackinputs.ReadFromURL;
import de.fraunhofer.sit.specifications.attackinputs.URLRequest;
import de.fraunhofer.sit.specifications.attackoutputs.DummyDatabaseCredentialsOutput;
import de.fraunhofer.sit.specifications.codegen.IGenerateCode;
import de.fraunhofer.sit.specifications.codegen.ITakesParameters;
import de.fraunhofer.sit.specifications.codegen.IUsesReferenceFields;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.testcases.TestCaseSource;
import de.fraunhofer.sit.specifications.util.IXMLReadable;
import de.fraunhofer.sit.specifications.util.MavenDependencyUtils;

/**
 * @author julius
 *
 */
public abstract class ExecutionProfile implements ITakesParameters, IUsesReferenceFields, IGenerateCode, ClasspathProvider, ClassSourceProvider, ResourceProvider {

	public abstract Map<String,String> getParameters();
	
	@Override
	public List<File> getClasspath() {
		List<File> l = new ArrayList<File>();
		l.addAll(testcase.testsuite.getClasspath());
		try {
			l.add(MavenDependencyUtils.downloadMavenArtifact("org.jsoup","jsoup","1.13.1"));
			if (testcase.inputs.stream().anyMatch((i) -> (i instanceof ReadFromURL))) {
				
				l.add(MavenDependencyUtils.downloadMavenArtifact("org.eclipse.jetty","jetty-server","11.0.8"));
				l.add(MavenDependencyUtils.downloadMavenArtifact("org.eclipse.jetty","jetty-util","11.0.8"));
				l.add(MavenDependencyUtils.downloadMavenArtifact("org.eclipse.jetty","jetty-io","11.0.8"));
				l.add(MavenDependencyUtils.downloadMavenArtifact("org.eclipse.jetty","jetty-http","11.0.8"));
				l.add(MavenDependencyUtils.downloadMavenArtifact("org.eclipse.jetty.toolchain","jetty-jakarta-servlet-api","5.0.2"));

			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		return l;
	}
	public TestCase testcase;
	
	@Override
	public Map<String, String> getAdditionalFiles() {
		Map<String, String> files = new HashMap<>();
		files.put("WEB-INF/classes/log4j.properties", "### direct log messages to stdout ###\n"
				+ "log4j.appender.stdout=org.apache.log4j.ConsoleAppender\n"
				+ "log4j.appender.stdout.Target=System.out\n"
				+ "log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout\n"
				+ "log4j.rootLogger=debug, stdout");
		files.putAll(testcase.testsuite.getAdditionalFiles());
		return files;
	}


	@Override
	public Map<String, String> getAdditionalClasses() {
		Map<String, String> classes = new HashMap<>();
		if (testcase.outputs.stream().anyMatch(o -> (o instanceof DummyDatabaseCredentialsOutput))) {
			try {
				classes.put("de.fraunhofer.sit.runexploits.database.DummyConnection", FileUtils.readFileToString(
						new File("../Runtime/src/de/fraunhofer/sit/runexploits/database/DummyConnection.java")));
				//classes.put("de.fraunhofer.sit.runexploits.database.JulietDummyDriver", FileUtils.readFileToString(
				//		new File("../Runtime/src/de/fraunhofer/sit/runexploits/database/JulietDummyDriver.java")));
				classes.put("de.fraunhofer.sit.runexploits.database.EmptyResultSet", FileUtils.readFileToString(
						new File("../Runtime/src/de/fraunhofer/sit/runexploits/database/EmptyResultSet.java")));
				classes.put("de.fraunhofer.sit.runexploits.database.DummyPreparedStatement", FileUtils.readFileToString(
						new File("../Runtime/src/de/fraunhofer/sit/runexploits/database/DummyPreparedStatement.java")));
				
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		classes.putAll(testcase.testsuite.getAdditionalClasses());
		try {
			classes.put("de.fraunhofer.sit.runexploits.environment.DummyInitialContext", FileUtils.readFileToString(
					new File("../RunExploits/src/main/java/de/fraunhofer/sit/runexploits/environment/DummyInitialContext.java")));
			classes.put("de.fraunhofer.sit.runexploits.environment.OWASPDummyContext", FileUtils.readFileToString(
					new File("../RunExploits/src/main/java/de/fraunhofer/sit/runexploits/environment/OWASPDummyContext.java")));
		} catch (IOException e) {
			throw new RuntimeException(e);
		}

		return classes;
	}

	/**
	 * Return the directory into which to compile classes.
	 * 
	 * @param root the docker container directory
	 * @return
	 */
	public abstract File getClassesTargetDirectory(File root);



	public ExecutionProfile(TestCase tc) {
		this.testcase = tc;
	}
	
	public abstract String getName();
}
