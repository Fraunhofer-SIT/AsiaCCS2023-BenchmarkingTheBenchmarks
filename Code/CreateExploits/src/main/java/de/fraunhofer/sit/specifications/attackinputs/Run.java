package de.fraunhofer.sit.specifications.attackinputs;

import java.io.File;
import java.io.IOException;
import java.lang.ProcessBuilder.Redirect;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackinputs.Input;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.executionprofile.JavaMethodExecution;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;
import spoon.Launcher;
import spoon.reflect.declaration.CtClass;

public class Run extends Input {
	
	//String[] arguments;
	public String processid;
	 class Template {
		static Process process_x;
		static HashMap<String,String> environment;
		public static void attackStep() throws Exception {
			if (process_x != null) {
				System.out.println("[RUN] killing old process...");
				process_x.destroyForcibly();
			}
			String cp = "__CLASSPATH__";
			List<String> command = new ArrayList<String>();
			command.add("java");		
			if (environment != null) {
				//pb.environment().putAll(environment);
				System.out.println("[RUN] environment variables: " + environment.toString());
				for (Entry<String, String> envar : environment.entrySet()) {
					command.add("-D"+envar.getKey()+"="+envar.getValue());
				}
				
			}
			command.add("-cp");
			command.add("/usr/src/poc/bin"+":"+cp);
			command.add("-Xmx1000m");
			command.add("de.fraunhofer.sit.testcodehelpers.MethodExecutor");
			command.add("-Djava.naming.factory.initial=de.fraunhofer.sit.runexploits.environment.DummyInitialContext");
			
			
			
			
			ProcessBuilder pb = new ProcessBuilder(command);
			if (environment != null)
				pb.environment().putAll(environment);
			pb.redirectError(ProcessBuilder.Redirect.INHERIT);
			System.out.println("[RUN] " + String.join(" ", command));
			process_x = pb.start();
			System.out.println("[RUN] process started ...");
			// sleep for short time to allow testcase to open sockets etc.
			Thread.sleep(1000);
		}

	}
	
	
	
	//@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		JavaMethodExecution executionProfile = (JavaMethodExecution)generator.executionProfile;
		File classDirectoryInContainer = executionProfile.getClassesTargetDirectory(new File("/usr/src/poc"));
		String libDirInContainer = "/usr/src/poc/lib/";
		
		String classpathInContainer = classDirectoryInContainer.toString();
		
		for (File jar : executionProfile.getClasspath()) {
			classpathInContainer += ":" + libDirInContainer + jar.getName();
		}
		Map<String, String> substitutions = new HashMap<>();
		substitutions.put("__CLASSPATH__", classpathInContainer);
		generator.merge(Template.class, getFieldRenames(), substitutions);
		
		
	}
	
	

	@Override
	public String getTagName() {
		return "Run";
	}

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> renames = new HashMap();
		renames.put("process_x", processid);
		renames.put("environment", "environment");
		return renames;
	}
	
	@Override
	public void readIn(Node node) {
		processid = XMLUtils.getAttributeValue(node, "processid", "process0");
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> params = new ArrayList<>();
		return params;
	}



	@Override
	boolean isPreLaunch() {
		// TODO Auto-generated method stub
		return false;
	}




}
