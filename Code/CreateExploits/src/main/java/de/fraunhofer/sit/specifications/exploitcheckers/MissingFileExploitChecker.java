package de.fraunhofer.sit.specifications.exploitcheckers;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.codegen.IGenerateCode;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.IXMLReadable;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class MissingFileExploitChecker extends SuccessfulExploitIndicator {
	String filename;
	
	
	class Template {
		public static boolean checkOutput(String filename) {
			File f = new File(filename);
			boolean exists = f.exists();
			System.out.println("[MISSINGFILE] file " + filename + " exists? " + exists);
			return !exists;
		}
		
	}
	@Override
	public String getTagName() {
		return "MissingFile";
	}

	@Override
	public void readIn(Node node) {
		filename = XMLUtils.getAttributeValue(node, "filename");
	}

	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> params = new ArrayList<>();
		params.add(filename);
		return params;
	}

}
