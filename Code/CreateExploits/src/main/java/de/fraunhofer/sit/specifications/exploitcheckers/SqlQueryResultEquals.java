package de.fraunhofer.sit.specifications.exploitcheckers;

import java.io.File;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackoutputs.DatabaseOutput;
import de.fraunhofer.sit.specifications.attackoutputs.Output;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.codegen.IGenerateCode;
import de.fraunhofer.sit.specifications.environment.Database;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.IXMLReadable;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class SqlQueryResultEquals extends SuccessfulExploitIndicator {
	public String query;
	public String expectedResult;
	public String column;
	
	static class Template {
		public static boolean initialise(String tablename) {
			return false;
			
		}
		public static boolean checkOutput(String connectionString, String column, String query, String expectedResult) throws Exception {
			Thread.sleep(5000);
			Connection db = null;
			ResultSet rs = null;
			// System.out.println() > debugger
			try {
				System.out.println("[SqlQueryResultEquals] connecting to " + connectionString);
				db = java.sql.DriverManager.getConnection(connectionString, "SA", null);
				//db.setAutoCommit(false);
				/*DatabaseMetaData md = db.getMetaData();
				ResultSet rst = md.getTables(null, null, "%", null);
				int c = 0;
				while (rst.next()) {
					System.out.println("[SqlQueryResultEquals] found table '" + rst.getString(3) + "'");
					c++;
				}
				rst.close();
				System.out.println("[SqlQueryResultEquals] table count: " + c);
				*/
				System.out.println("[SqlQueryResultEquals] preparing query " + query);
				PreparedStatement prepareStatement = db.prepareStatement(query);
				prepareStatement.setQueryTimeout(10);
				System.out.println("[SqlQueryResultEquals] executing...");
				rs = prepareStatement.executeQuery(); 
				System.out.println("[SqlQueryResultEquals] got result set, iterating...");
				while (rs.next()) {
					String value = rs.getString(column);
					System.out.println(String.format("[SqlQueryResultEquals] expected: '%s' actual: '%s'", expectedResult, value));
					if ((value == null && expectedResult == null) || (value != null && value.equals(expectedResult)) ) {
						System.out.println("[SqlQueryResultEquals] success");
						
						return true;
					}
				}
				System.out.println("[SqlQueryResultEquals] closing...");
				db.close();
	
				System.out.println("[SqlQueryResultEquals] no value found");
				return false;
			} catch (SQLException e) {
				e.printStackTrace(System.out);
				new RuntimeException("Failed to check sql", e).printStackTrace();
				return false;
			} finally {
				/*if (db != null) {
					db.close();
				}
				if (rs != null) {
					rs.close();
				}*/
			}
		}
	}
	@Override
	public String getTagName() {
		return "SqlQueryResultEquals";
	}

	@Override
	public void readIn(Node node) {
		query = XMLUtils.getAttributeValue(node, "query");
		expectedResult = XMLUtils.getAttributeValue(node, "expectedResult");
		column = XMLUtils.getAttributeValue(node, "column");
	}

	// not in specification, but testcase-dependent
	private String connectionString;
	
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		for (Output o : testcase.outputs) {
			if (o instanceof DatabaseOutput) {
				connectionString = ((DatabaseOutput) o).connection;
			}
		}
		if (connectionString == null) {
			throw new RuntimeException("MissingTableExploitChecker without DatabaseOutput. Please add DatabaseOutput.");
		}
		generator.merge(Template.class, getFieldRenames());
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> params = new ArrayList<>();
		params.add(connectionString);
		params.add(column);
		params.add(query);
		params.add(expectedResult);

		return params;
	}

}
