package de.fraunhofer.sit.generatedexploits;

import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Phaser;

public class Template {
	
	static Phaser attackFinished = new Phaser();
	
	public static void main(String[] args) throws Exception {
		startEnvironment();
		Thread.sleep(6000);
		waitForServices();
		boolean result = performExploits();
		if (result) {
			System.out.println("[EXPLOIT] result: Exploit detected");
		} else {
			System.out.println("[EXPLOIT] result: Exploit not detected");
		}
		// Thread.sleep(1000 * 1000);
		System.exit(0);
	}
	public static void waitForServices() {
		System.out.println("waiting for sevices to go up...");
		while (true) {
			try {
				/* WAITFORSERVICES */
				
				break;
			} catch (Exception e) {
				// keep waiting

				try {
					Thread.sleep(2000);
				} catch (InterruptedException e1) {
					
				}
			}
		}
		System.out.println("services are up...");
	}
	public static void startEnvironment() {
		
	}

	public static void attackSuccessful() {
		System.out.println("Attack successful.");
	}

	public static void attackFailed() {
		throw new RuntimeException("Attack failed");
	}

	public static boolean performExploits() throws Exception {
		return false;
	}
	
	public static byte[] toPrimitive(Byte[] javaBytes) {
		// spoon limitation?
		byte[] bytes = new byte[javaBytes.length];;

		int j = 0;
		for(Byte b: javaBytes)
		    bytes[j++] = b.byteValue();
		return bytes;
	}

}
