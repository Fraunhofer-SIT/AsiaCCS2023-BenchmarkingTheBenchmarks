package de.fraunhofer.sit.specifications.attackoutputs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Phaser;
import java.util.concurrent.Semaphore;

import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackinputs.Input;
import de.fraunhofer.sit.specifications.attackinputs.Run;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class StdOutAsync extends OutputAsync {
	
	public String reference;
	public String destination;

	public  class Template {
		
		static Phaser attackFinished;
		
		static Process process_x;

		static String programOutput;
		
		static boolean outputTimedout = false;
		static void processOutput() throws Exception {
			attackFinished.register(); 
			new Thread() {
				private void collectOutput() throws Exception {
					int timeout = 20 * 1000;
					InputStream inputStream = process_x.getInputStream();
					System.out.println(String.format("[STDOUT] collecting stdout %x... ", System.identityHashCode(inputStream)));

					StringBuilder w = new StringBuilder();
					while (true) {
						int wait = 0;
						while (inputStream.available() == 0 ) {
							Thread.sleep(100);
							wait += 100;
							// only timeout if all other attack inputs have concluded
							// this step should be the only active one.
							if (wait > timeout && attackFinished.getUnarrivedParties() == 1) {
								outputTimedout = true;
								programOutput += w.toString();
								System.out.println("[STDOUT] timout while getting program stdoutput. ");
								
								return;
							}
						}
						int r = inputStream.read();
						if (r == -1) {
							break;
						}
						System.out.print((char)r);
						// save space
						// System.out.print("\u001B[35m" + (char)r + "\u001B[0m");
						w.append((char)r);
					}
		        	programOutput += w.toString();
				}
				@Override
				public void run() {
					
					try {
						collectOutput();
					} catch (Exception e) {
						e.printStackTrace();
					}
					System.out.println("[STDOUT] finished collecting stdout. output: \n" + programOutput + "\n[STDOUT] end of output");
					attackFinished.arriveAndDeregister();
					
				}
			}.start();
			
        	
		    
		}
		
	}
	
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		generator.merge(Template.class, getFieldRenames());
	}
	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> renames = new HashMap();
		renames.put("process_x", reference);
		renames.put("programOutput", destination);
		renames.put("outputTimedout", "outputTimedout");
		return renames;
	}
	@Override
	public String getTagName() {
		return "StdOutAsync";
	}

	@Override
	public void readIn(Node node) {
		reference = XMLUtils.getAttributeValue(node, "reference", "process0");
		destination = XMLUtils.getAttributeValue(node, "destination", "programOutput");
	}
	@Override
	public Input getTriggeringInput(List<Input> inputs) {
		for (Input i : inputs) {
			if (i instanceof Run) {
				if (reference.equals(((Run)i).processid)) {
					return i;
				}
			}
		}
		return null;
	}

	
}
