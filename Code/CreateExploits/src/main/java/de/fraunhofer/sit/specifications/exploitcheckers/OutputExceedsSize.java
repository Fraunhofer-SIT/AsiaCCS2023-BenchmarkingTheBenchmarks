package de.fraunhofer.sit.specifications.exploitcheckers;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.function.Consumer;

import org.apache.commons.lang3.StringEscapeUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.NodeTraversor;
import org.jsoup.select.NodeVisitor;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackoutputs.Output;
import de.fraunhofer.sit.specifications.attackoutputs.WriteToFile;
import de.fraunhofer.sit.specifications.attackpatterns.Presets;
import de.fraunhofer.sit.specifications.codegen.CodeGenerator;
import de.fraunhofer.sit.specifications.codegen.IGenerateCode;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class OutputExceedsSize extends SuccessfulExploitIndicator implements IGenerateCode {

	public String reference;
	
	// implicitly always check program output.
	
	public long maximumSize;
	
	
	public static class TemplateSubstring {
		public static String programOutput;
		public static long filesize = -1;
		public static boolean checkOutput(long maximumSize) throws IOException {
			System.out.println("[OUTPUTEXCEEDSSIZE] filesize " + filesize);
			if (filesize != -1) {
				System.out.println("[OUTPUTEXCEEDSSIZE] " + filesize + " > " + maximumSize + " ?");
				return filesize > maximumSize;
			}
			System.out.println("[OUTPUTEXCEEDSSIZE] " + programOutput.length() + " > " + maximumSize + " ?");
			return programOutput.length() > maximumSize;
		}

	
	}

	String fileid = "UNUSED_file";
	@Override
	public void generateCode(TestCase testcase, CodeGenerator generator) {
		testcase.outputs.stream().filter(o -> (o instanceof WriteToFile)).findFirst().ifPresent( new Consumer<Output>() {
			public void accept(Output t) {
				fileid = ((WriteToFile)t).id;
			};
		});
		generator.merge(TemplateSubstring.class, getFieldRenames());
	}

	@Override
	public String getTagName() {
		return "OutputExceedsSize";
	}

	@Override
	public void readIn(Node node) {
		reference = XMLUtils.getAttributeValue(node, "reference", "programOutput");
		maximumSize = Long.valueOf(XMLUtils.getAttributeValue(node, "size"));
	}

	@Override
	public Map<String, String> getFieldRenames() {
		Map<String, String> fields = new HashMap<>();
		fields.put("programOutput", reference);
		fields.put("filesize", fileid + "_size");
		return fields;
	}

	@Override
	public List<Object> getParameterValues() {
		List<Object> params = new ArrayList<>();
		params.add(maximumSize);
		return params;
	}
	
	
}
