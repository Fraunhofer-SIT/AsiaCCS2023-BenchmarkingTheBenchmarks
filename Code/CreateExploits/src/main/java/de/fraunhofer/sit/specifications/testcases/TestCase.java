package de.fraunhofer.sit.specifications.testcases;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.codehaus.plexus.util.xml.XmlUtil;
import org.w3c.dom.Node;

import de.fraunhofer.sit.specifications.attackinputs.Input;
import de.fraunhofer.sit.specifications.attackinputs.InputParameter;
import de.fraunhofer.sit.specifications.attackoutputs.Output;
import de.fraunhofer.sit.specifications.data.Data;
import de.fraunhofer.sit.specifications.executionprofile.ExecutionProfile;
import de.fraunhofer.sit.specifications.executionprofile.ExecutionProfileProvider;
import de.fraunhofer.sit.specifications.executionprofile.testsuite.Testsuite;
import de.fraunhofer.sit.specifications.util.IXMLReadable;
import de.fraunhofer.sit.specifications.util.XMLUtils;

public class TestCase implements IXMLReadable {
	public String key;

	public String attackPatternId;
	public int cwe;
	public List<Input> inputs = new ArrayList<>();
	public List<Output> outputs = new ArrayList<>();
	public ExecutionProfileProvider executionProfileProvider;

	public Testsuite testsuite;
	public List<TestCaseSource> sources = new ArrayList<>();
	public List<InputParameter> defaultVariables = new ArrayList<>();
	public boolean exploitable;	
	
	public Node sourceNode;
	public String reasonNotExploitable = null;
	
	@Override
	public void readIn(Node node) {
		sourceNode = node;
		key = XMLUtils.getAttributeValue(node, "Key");
		reasonNotExploitable = XMLUtils.getAttributeValue(node, "reasonNotExploitable", null);
		testsuite = Testsuite.getTestsuite(XMLUtils.getAttributeValue(node, "testsuite"));
		exploitable = XMLUtils.getAttributeValue(node, "exploitable").equalsIgnoreCase("true");
		cwe = Integer.valueOf(XMLUtils.getAttributeValue(node, "cwe"));
		if (reasonNotExploitable == null) {
			Node attackPatternNode = XMLUtils.getFirstChildNodeByName(node, "AttackPattern");
			attackPatternId = XMLUtils.getAttributeValue(attackPatternNode, "id");
			
			Node varsNode = XMLUtils.getFirstChildNodeByName(node, "DefaultVariables");
			if (varsNode != null) {
				readChildsIntoCollection(varsNode, defaultVariables);
			}
			readChildsIntoCollection(XMLUtils.getFirstChildNodeByName(node, "Inputs"), inputs);
			readChildsIntoCollection(XMLUtils.getFirstChildNodeByName(node, "Outputs"), outputs);
			readChildsIntoCollection(XMLUtils.getFirstChildNodeByName(node, "Classes"), sources);
			Node executionProfileNode = XMLUtils.getFirstChildNodeByName(node, "ExecutionProfile");
			executionProfileProvider = (ExecutionProfileProvider) readFirstChildIn( executionProfileNode);
		}
		
	}
	@Override
	public String getTagName() {
		return "Test";
	}


}
