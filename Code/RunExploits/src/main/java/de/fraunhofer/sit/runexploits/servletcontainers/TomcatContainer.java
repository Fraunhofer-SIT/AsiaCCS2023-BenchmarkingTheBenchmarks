package de.fraunhofer.sit.runexploits.servletcontainers;

import java.util.EventListener;
import java.util.Map;
import java.util.Map.Entry;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.ServletContextListener;

import org.apache.catalina.Context;
import org.apache.catalina.Lifecycle;
import org.apache.catalina.LifecycleEvent;
import org.apache.catalina.LifecycleListener;
import org.apache.catalina.connector.Connector;
import org.apache.catalina.startup.Tomcat;


public class TomcatContainer extends ServletContainerReference {

	private static final int PORT = 8081;

	@Override 
	public int getPort() {
		return PORT;
	}

	@Override
	public String getName() {
		return "Tomcat";
	}

	@Override
	public void startServletContainer(String webAppPath) throws Throwable {
		Tomcat tomcat = new Tomcat();
		tomcat.setPort(PORT);
		
		Connector connector = tomcat.getConnector(); // this is necessary to create the connector
		Context ctx = tomcat.addWebapp("", webAppPath);
		
		InitialContext c = new InitialContext();
        final Map<?, ?> ctxMap = c.getEnvironment();
		for (EventListener e : listeners) {
			ctx.addLifecycleListener(new LifecycleListener() {
				
				@Override
				public void lifecycleEvent(LifecycleEvent event) {
					
					
					if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {
						InitialContext cc;
						try {
							cc = new InitialContext();
							for (Entry<?, ?> i : ctxMap.entrySet()) {
								if (i.getKey() instanceof String) {
									cc.bind((String)i.getKey(), i.getValue());
								}
							}

						} catch (NamingException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						
						if (e instanceof ServletContextListener) {
							ServletContextListener l = (ServletContextListener) e;
							try {
								l.contextInitialized(null);
							} catch (Throwable e) {
								e.printStackTrace();
							}
						}
					}
				}
			});
		}
		tomcat.start();

	}

	@Override
	public String getVersion() {
		return "9.0.45";
	}

	@Override
	public boolean usesJakarta() {
		return false;
	}
	
	public static void main(String[] args) throws Throwable {
		new TomcatContainer().start(args[0]);
	}

}
