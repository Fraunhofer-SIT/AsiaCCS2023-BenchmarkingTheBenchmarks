package de.fraunhofer.sit.runexploits;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.util.List;

import org.xml.sax.SAXException;

import de.fraunhofer.sit.runexploits.environment.OWASPEnvironment;
import de.fraunhofer.sit.runexploits.servletcontainers.JettyContainer;
import de.fraunhofer.sit.runexploits.servletcontainers.ServletContainerReference;
import de.fraunhofer.sit.runexploits.servletcontainers.TomcatContainer;
import de.fraunhofer.sit.runexploits.servletcontainers.WinstoneContainer;
import de.fraunhofer.sit.specifications.attackoutputs.Output;
import de.fraunhofer.sit.specifications.attackpatterns.AttackPattern;
import de.fraunhofer.sit.specifications.attackpatterns.AttackPatternPreset;
import de.fraunhofer.sit.specifications.attackpatterns.Presets;
import de.fraunhofer.sit.specifications.environment.Database;
import de.fraunhofer.sit.specifications.exploitcheckers.MissingTableExploitChecker;
import de.fraunhofer.sit.specifications.exploitcheckers.SuccessfulExploitIndicator;
import de.fraunhofer.sit.specifications.testcases.TestCase;
import de.fraunhofer.sit.specifications.util.ParseModels;

public class RunExploitsApp {

	private static final ServletContainerReference[] SERVLETS = new ServletContainerReference[] { new JettyContainer(),
			new TomcatContainer(), new WinstoneContainer() };
	private static Presets presets;

	private static OWASPEnvironment owaspEnvironment;
	private static Connection connection;
	public static void main(String[] args) throws Throwable {
		owaspEnvironment = new OWASPEnvironment();
		for (ServletContainerReference i : SERVLETS) {
			i.startServletContainer(getWebDir(i.usesJakarta()));
		}
		
		presets = ParseModels.loadPresets();
		connection = owaspEnvironment.database.getConnection();
		Database.setConnection(connection);
		RunExploitsApp.testOWASP();
		
	}
	
	public static void testOWASP() throws Exception {
		System.out.println("Verifying OWASP benchmarks according to specification");
		List<TestCase> testcases = ParseModels.parseTestCases();
		
		for (TestCase tc : testcases)  {
			exploitTestcase(tc);
		}
	}
	
	private static void exploitTestcase(TestCase tc) throws Exception {
		AttackPattern pattern = presets.getPattern(tc.attackPatternId);
		for (AttackPatternPreset preset : pattern.presets) {
			for (SuccessfulExploitIndicator indicator : preset.successfulAttackIndicators) {
				if (indicator instanceof MissingTableExploitChecker) {
					MissingTableExploitChecker missingTableChecker = (MissingTableExploitChecker) indicator;
					String createTable = String.format("CREATE TABLE IF NOT EXISTS %s (dummycolumn int)", missingTableChecker.tablename);
					connection.prepareStatement(createTable).execute();
				}
			}
			String classname = "de.fraunhofer.sit.generatedexploits.owasp." + tc.key + "_" + preset.id;
			Class test = null;
			try {
				test = Class.forName(classname);
			} catch (ClassNotFoundException e) {
				System.out.println("No exploit class found for " + tc.key);
				return;
			}
			Method runMethod = test.getMethod("performExploits");
			Boolean result = (Boolean)runMethod.invoke(null);
			if (result) {
				System.out.println(String.format("sucessfully exploited %s using attackpreset %s", tc.key, preset.id));
				return;
			}
		}
		System.out.println(String.format("Failed to exploit %s (%s)", tc.key, tc.attackPatternId));
	}
	

	private static String getWebDir(boolean jakarta) throws IOException {
		return new File(jakarta ? "../WebRoot-Jakarta" : "../WebRoot").getCanonicalPath();
	}
}
